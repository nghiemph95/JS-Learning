import { GAME_STATUS, GAME_TIME, PAIRS_COUNT } from './constants.js';
import {
  getColorListElement,
  getColorElementList,
  getInActiveColorList,
  getPlayAgainButton,
} from './selectors.js';
import {
  createTimer,
  getRandomColorPairs,
  hidePlayAgainButton,
  setTimerText,
  showPlayAgainButton,
} from './utils.js';

// Global variables
let selections = [];
let gameStatus = GAME_STATUS.PLAYING;
let timer = createTimer({
  seconds: 5,
  onChange: handleTimerChange,
  onFinish: handleTimerFinish,
});

function handleTimerChange(second) {
  console.log('change', second);
  // hi·ªÉn th·ªã timerText, ƒë·∫øm gi·ªù countdown
  setTimerText(`0${second}`.slice(-2)); // l·∫•y 2 ch·ªØ s·ªë
}

function handleTimerFinish() {
  console.log('finished');
  // k·∫øt th√∫c game
  gameStatus = GAME_STATUS.FINISHED;

  setTimerText('Game Over! üò≠');

  // hi·ªÉn th·ªã n√∫t replay
  showPlayAgainButton();
}

// TODOs
// 1. Generating colors using https://github.com/davidmerfield/randomColor
// 2. Attach item click for all li elements
// 3. Check win logic
// 4. Add timer
// 5. Handle replay click
// console.log(getRandomColorPairs(PAIRS_COUNT))

// g·∫Øn class active cho c√°c liElement
function handleColorClick(liElement) {
  // kh√¥ng cho click khi game ·ªü tr·∫°ng th√°i blocking ho·∫∑c finished
  const shouldBlockClick = [GAME_STATUS.BLOCKING, GAME_STATUS.FINISHED].includes(gameStatus);
  const isClicked = liElement.classList.contains('active');
  if (!liElement || isClicked || shouldBlockClick) return;

  // hi·ªán m√†u khi click v√†o c√°c √¥
  liElement.classList.add('active');

  // sau m·ªói l·∫ßn click l∆∞u c√°c th√¥ng tin v√†o 1 m·∫£ng t·∫°m
  selections.push(liElement);

  // console.log('cell click', selections)
  // n·∫øu click 1 l·∫ßn th√¨ ch∆∞a l√†m g√¨ c·∫£, ch·ª´ng n√†o click 2 l·∫ßn th√¨ m·ªõi ti·∫øp t·ª•c check
  if (selections.length < 2) return;

  // ki·ªÉm tra sau 2 l·∫ßn click, 2 m√†u s·∫Øc c√≥ gi·ªëng ho·∫∑c kh√°c nhau ?
  const firstColor = selections[0].dataset.color;
  const secondColor = selections[1].dataset.color;
  const isMatch = firstColor === secondColor;

  if (isMatch) {
    // ki·ªÉm tra ƒë√£ win ch∆∞a, ƒë√£ ƒë·ªß 16 √¥ hay ch∆∞a (t√¨m nh·ªØng th·∫±ng ko c√≥ tr·∫°ng th√°i active)
    const isWin = getInActiveColorList().length === 0;

    if (isWin) {
      console.log('win');
      // hi·ªÉn th·ªã n√∫t replay
      showPlayAgainButton();
      // hi·ªÉn th·ªã YOU WIN
      setTimerText('YOU WIN! üåü');
      // kh√¥ng cho ch·∫°y countdown khi win n√™n ph·∫£i clear countdown
      timer.clear();
      // update game status
      gameStatus = GAME_STATUS.FINISHED;
    }

    selections = [];
    return;
  }

  // tr∆∞·ªùng h·ª£p kh√¥ng match
  // x√≥a b·ªè class-active cho 2 li-element ƒëang ƒëc click
  gameStatus = GAME_STATUS.BLOCKING;

  setTimeout(() => {
    // console.log('timeout run')
    /** sau khi click 3 l·∫ßn th√¨
     * l·∫ßn 1: kh√¥ng trigger setTimeout
     * l·∫ßn 2: trigger setTimeout (·ªü l·∫ßn 2 khi trigger setTimeout n√≥ s·∫Ω v√¥ t√¨nh clear seletions = [])
     * l·∫ßn 3: trigger setTimeout (d·∫´n ƒë·∫øn ·ªü l·∫ßn th·ª© 3 -> get error)
     */
    selections[0].classList.remove('active');
    selections[1].classList.remove('active');

    // reset l·∫°i m·∫£ng r·ªóng cho selections cho l∆∞·ª£t k·∫ø ti·∫øp
    selections = [];

    // reset l·∫°i tr·∫°ng th√°i game v·ªÅ playing sau khi setTimeout ƒë∆∞·ª£c th·ª±c thi
    gameStatus = GAME_STATUS.PLAYING;
  }, 500);
}

function initColors() {
  // random 8 colors
  const colorList = getRandomColorPairs(PAIRS_COUNT); // 16 colors ƒë∆∞·ª£c generated

  // bind to li > div.overlay
  const liList = getColorElementList(); // 16 √¥ liElement

  liList.forEach((liElement, index) => {
    //t·∫°o data color cho t·ª´ng th·∫ª liElement
    liElement.dataset.color = colorList[index];
    // g·∫Øn m√†u cho t·ª´ng th·∫ª liElement
    const overlayElement = liElement.querySelector('.overlay');
    if (overlayElement) overlayElement.style.backgroundColor = colorList[index];
  });
}

function attachEventForColorList() {
  const ulElement = getColorListElement();

  // s·ª≠ d·ª•ng k·ªπ thu·∫≠t event delegation ƒë·ªÉ add s·ª± ki√™n click cho th·∫±ng cha
  ulElement.addEventListener('click', (event) => {
    if (event.target.tagName !== 'LI') return;
    handleColorClick(event.target);
  });
}

//reset game
function resetGame() {
  // reset global variable
  selections = [];
  gameStatus = GAME_STATUS.PLAYING;
  // reset DOM element
  // - x√≥a class active cho c√°c √¥
  const colorElementList = getColorElementList();
  colorElementList.forEach((element) => {
    element.classList.remove('active');
  });
  // - x√≥a button playagain
  hidePlayAgainButton();
  // - x√≥a textTimer YOU WIN
  setTimerText('');
  // re generate color
  initColors();
  // sau khi reset game c≈©ng ph·∫£i startTimer
  startTimer();
}

function attachEventForPlayAgainButton() {
  const playAgainButton = getPlayAgainButton();

  if (!playAgainButton) return;

  playAgainButton.addEventListener('click', resetGame);
}

//H√†m startTimer
function startTimer() {
  timer.start();
}

//main
(() => {
  initColors();

  attachEventForColorList();

  attachEventForPlayAgainButton();

  startTimer();
})();
